<?php
// $Id: soapclient.module,v 1.5 2008/06/12 12:01:31 boogiebug Exp $

/**
* @file
* Provide basic SOAP Client API for other modules.
*/

/* ---------------------------------
* GLOBAL
* --------------------------------- */
global $soapclient_LIBRARY;

switch( variable_get('soapclient_lib', 'auto') )
{
  case 'auto':
    // check for PHP5SOAP first, the load
    // the nuSOAP, if PHP5SOAP not available.

  case 'PHP5SOAP':
    if ( extension_loaded('soap') )
    {
      $soapclient_LIBRARY = 'PHP5SOAP';
      break;
    }
    // no PHP5SOAP, loading nuSOAP

  case 'nuSOAP':
    require_once('nusoap/nusoap.php');
    require_once('nusoap/class.wsdlcache.php');
    $soapclient_LIBRARY = 'nuSOAP';
    break;
}

// load wrapper class
require_once('lib/drupal_soap_client.inc');

/* ---------------------------------
* DRUPAL HOOK
* --------------------------------- */

/**
* implementation of hook_requirements()
*/
function soapclient_requirements($phase)
{
  $t = get_t();

  // check for SOAP library
  $requirements['soapclient'] = array(
    'title' => $t('SOAP Client'),
    'value' => $t('PHP5 SOAP or nuSOAP')
  );

  if (!file_exists(realpath(dirname(__FILE__). '/nusoap/nusoap.php')) && !extension_loaded('soap'))
  {
    $requirements['soapclient']['severity'] = REQUIREMENT_ERROR;
    $requirements['soapclient']['value'] = $t('Neither nuSOAP nor PHP5 SOAP exist');
    $requirements['soapclient']['description'] = $t('Reinstall full package of soapclient.module, or '.
                                                    'enabling SOAP extension, if you are using PHP5');
  }

  return $requirements;
}

/**
* implementation of hook_init()
*/
function soapclient_init()
{
}

/**
* implementation of hook_exit()
*/
function soapclient_exit($destination = NULL)
{
}

/**
* implementation of hook_help()
*/
function soapclient_help($section = '')
{
  switch ($section)
  {
    case 'admin/settings/soapclient':
      return t('Configure SOAPClient configuration');
  }
}

/**
 * implementation of hook_perm()
 */
function soapclient_perm()
{
  return array('configure SOAPClient', 'access SOAPClient Test Page');
}

/**
* implementation of hook_menu()
*/
function soapclient_menu()
{
  $items = array();

  $items['admin/settings/soapclient'] = array(
    'title'            => t('SOAP Client'),
    'description'      => t('Configure and test the SOAP Client'),
    'type'             => MENU_NORMAL_ITEM,
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('soapclient_admin'),
    'access callback'  => 'user_access',
    'access arguments' => array('configure SOAPClient'),
  );

  $items['admin/settings/soapclient/config'] = array(
    'title'       => t('Configure'),
    'description' => t('Change the proxy and timeout configuration for SOAPClient.'),
    'type'        => MENU_DEFAULT_LOCAL_TASK,
    'access callback'  => 'user_access',
    'access arguments' => array('configure SOAPClient'),
  );

  $items['admin/settings/soapclient/test'] = array(
    'title'       => t('Test/Demo'),
    'description' => t('The test page for SOAP Client'),
    'type'        => MENU_LOCAL_TASK,
    'access callback'  => 'user_access',
    'access arguments' => array('configure SOAPClient'),
  );

  return $items;
}

/* ---------------------------------
* FORMS and UI
* --------------------------------- */
function soapclient_admin()
{
  switch(arg(3))
  {
    case 'test':
      $title = t('Test SOAP Client');
      $output = soapclient_test();
      break;

    case 'config':
    default:
      $title = t('Configure SOAP Client');
      $output = soapclient_config();
  }

  drupal_set_title($title);
  return $output;
}

// configuration form
function soapclient_config()
{
  global $soapclient_LIBRARY;

  $form    = array();
  $libinfo = soapclient_get_libname();

  $form['library'] = array(
    '#value' => t('<ul>'.
                  '<li>Current SOAP Client Library is <b>!soaplib</b>!soapmode</li>' .
                  '</ul>',
                  array(
                    '!soaplib'  => $libinfo['desc'],
                    '!soapmode' => $soapclient_LIBRARY == 'auto' ? ' (auto)': '',
                  )
                ),  
  );

  $form['soapclient_lib'] = array(
    '#type'    => 'radios',
    '#title'   => t('Active SOAP Library'),
    '#options' => array(
                    'PHP5SOAP' => t('SOAP Extension on PHP5'),
                    'nuSOAP'   => t('nuSOAP'),
                    'auto'     => t('Auto detect (PHP5 SOAP first then nuSOAP)'),
                  ),
    '#default_value' => variable_get('soapclient_lib', 'auto'),
    '#description'   => t('Which SOAP library do you want to use? On PHP5, you may use the native SOAP extension, '.
                          'nuSOAP or PHP4 and later. Currently the <strong>!lib</strong> is activated.',
                          array('!lib' => t($libinfo['desc']) )),
  );

  $form['soapclient_proxyhost'] = array(
    '#type'  => 'textfield',
    '#title' => t('Proxy Host'),
    '#size'  => 120,
    '#maxlength'     => 256,
    '#default_value' => variable_get('soapclient_proxyhost', ''),
    '#description'   => t('Enter the IP address or host name of the proxy server between '.
                          'your Drupal server and the SOAP server, or leave blank if not applicable'),
  );

  $form['soapclient_proxyport'] = array(
    '#type'  => 'textfield',
    '#title' => t('Proxy Port'),
    '#size'  => 5,
    '#maxlength'     => 5,
    '#default_value' => variable_get('soapclient_proxyport', ''),
    '#description'   => t('Enter the IP port of the proxy server between your Drupal server '.
                          'and the SOAP server, or leave blank if not applicable'),
  );

  $form['soapclient_proxyuser'] = array(
    '#type'  => 'textfield',
    '#title' => t('Proxy User'),
    '#size'  => 32,
    '#maxlength'     => 64,
    '#default_value' => variable_get('soapclient_proxyuser', ''),
    '#description'   => t('Enter the user name for the proxy server between your Drupal server '.
                          'and the SOAP server, or leave blank if not applicable'),
  );

  $form['soapclient_proxypass'] = array(
    '#type'  => 'textfield',
    '#title' => t('Proxy Password'),
    '#size'  => 32,
    '#maxlength'     => 64,
    '#default_value' => variable_get('soapclient_proxypass', ''),
    '#description'   => t('Enter the password for the proxy server between your Drupal server '.
                          'and the SOAP server, or leave blank if not applicable'),
  );

  if ( $soapclient_LIBRARY == 'nuSOAP' )
  {
    $form['soapclient_reqtimeout'] = array(
      '#type'  => 'textfield',
      '#title' => t('SOAP Server Connection Timeout'),
      '#size'  => 5,
      '#maxlength'     => 5,
      '#default_value' => variable_get('soapclient_reqtimeout', 10),
      '#description'   => t('Enter the period of time (in seconds) to wait until the connection is '.
                            'established when your Drupal server connect to the SOAP server. (The '.
                            'default value is 10 seconds)'),
    );

    $form['soapclient_reptimeout'] = array(
      '#type'  => 'textfield',
      '#title' => t('SOAP Server Response Timeout'),
      '#size'  => 5,
      '#maxlength'     => 5,
      '#default_value' => variable_get('soapclient_reptimeout', 30),
      '#description'   => t('Enter the period of time (in seconds) to wait until the result is '.
                            'returned when your Drupal server request for a service from the SOAP '.
                            'server. (The default value is 30 seconds)'),
    );

    $form['soapclient_wsdlcache_path'] = array(
      '#type'  => 'textfield',
      '#title' => t('WSDL Cache Directory'),
      '#size'  => 64,
      '#maxlength'     => 256,
      '#default_value' => variable_get('soapclient_wsdlcache_path', '/tmp'),
      '#description'   => t('Enter the directory to allow nuSOAP keep it\'s WSDL cache. Note that the '.
                            'read/write permission is required.'),
    );

    $form['soapclient_wsdlcache_lifetime'] = array(
      '#type'  => 'textfield',
      '#title' => t('WSDL Cache Lifetime'),
      '#size'  => 5,
      '#maxlength'     => 5,
      '#default_value' => variable_get('soapclient_wsdlcache_lifetime', 60),
      '#description'   => t('Enter the period of time (in seconds) to keep the WSDL cache. (The default value is 60 seconds)'),
    );
  }

  return system_settings_form($form);
}

// SOAP testing form
function soapclient_test()
{
  global $soapclient_LIBRARY;
  
  $libinfo = soapclient_get_libname();

  $form['library'] = array(
    '#value' => t('<p>Current SOAP Client Library is <b>!lib</b>!mode</p>',
                array(
                  '!lib' => t($libinfo['desc']),
                  '!mode' => ($soapclient_LIBRARY == 'auto' ? ' (auto)': '')
                )
              ),
  );


  $form['endpoint'] = array(
    '#type'  => 'textfield',
    '#title' => t('SOAP server endpoint URL'),
    '#size'  => 128,
    '#maxlength'   => 256,
    '#description' => t('Enter the absolute endpoint URL of the SOAP Server service. If WSDL is being used, this will be the URL to retrieve the WSDL.'),
    '#required'    => TRUE
  );

  $form['wsdl'] = array(
    '#type'  => 'checkbox',
    '#title' => t('Use WSDL?'),
    '#default_value' => 1,
  );

  $form['namespace'] = array(
    '#type'  => 'textfield',
    '#title' => t('Target Namespace'),
    '#size'  => 128,
    '#maxlength'   => 256,
    '#description' => t('If WSDL is <strong>not</strong> used, enter the target namespace URI here. Otherwise, leave it blank.'),
  );
  
  $form['use'] = array(
    '#type'  => 'radios',
    '#title' => 'Use',
    '#default_value' => 0,
    '#options'       => array('encoded', 'literal'),
    '#description'   => t('Specify how the SOAP client serialise the message.'),
  );

  $form['style'] = array(
    '#type'  => 'radios',
    '#title' => 'Style',
    '#default_value' => 0,
    '#options'       => array('rpc', 'document'),
    '#description'   => t('Specify the style of SOAP call.'),
  );

  $form['function'] = array(
    '#type'  => 'textfield',
    '#title' => t('SOAP Function'),
    '#size'  => 128,
    '#maxlength'   => 256,
    '#description' => t('Enter the function name to be called.'),
    '#required'    => TRUE
  );

  $form['arguments'] = array(
    '#type'  => 'textarea',
    '#title' => t('Agruments'),
    '#cols'  => 128,
    '#rows'  => 10,
    '#description' => t('Enter the arguments of the function. One argument per line, '.
                        'for named arguments, the format of <em>name=value<em> may be used.'),
  );

  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Go!'),
  );

  $form['#submit'][] ='soapclient_test_submit';
  
  return $form;
}

// execute the testing form
function soapclient_test_submit($form, $form_state)
{
  $param_str = preg_replace('/[\s]*=[\s]*/', '=', $form['arguments']['#value']);
  $params    = split("\n", $param_str);
  
  $args = array();

  foreach($params as $param)
  {
    list($name, $value) = split('=', $param);
    
    if ( isset($value) )
    {
      $args[$name] = trim($value);
    }
    else
    {
      $args[] = trim($name);
    }
  }
  
  $options = array();
  
  $options['namespace'] = $form['namespace']['#value'];
  $options['use']       = ( $form['use']['#value']   == 0 ? 'encoded' : 'literal' );
  $options['style']     = ( $form['style']['#value'] == 0 ? 'rpc'     : 'document');  
  
  $result = soapclient_init_client($form['endpoint']['#value'], $form['wsdl']['#value'], $options);
  
  if ( $result['#error'] !== FALSE )
  {
    drupal_set_message(t('<h2>Error!</h2><pre>!msg</pre>', array('!msg' => $result['#error'])), 'error');
  }
  
  $result = $result['#return']->call($form['function']['#value'], $args);
  
  if ( $result['#error'] !== FALSE )
  {
    drupal_set_message(t('<h2>Error!</h2><pre>!msg</pre>', array('!msg' => $result['#error'])), 'error');
  }
  else
  {
    drupal_set_message(t('Return value is: <pre>@return</pre>', array('@return' => print_r($result['#return'], TRUE))));
  }
}

/* ---------------------------------
* API
* --------------------------------- */

/**
* Determine, which library we are using?
* 
* @return
*   An associative array of the SOAP library
*   information with the following keys:
*   - 'lib'  : Short name of the library/extension.
*              Possible values are PHP5SOAP, nuSOAP, N/A
*   - 'desc' : Full name of the library/extension.
*/
function soapclient_get_libname()
{
  global $soapclient_LIBRARY;
  $info = array();
  
  switch ($soapclient_LIBRARY)
  {
    case 'PHP5SOAP':
      $info['lib']  = 'PHP5SOAP';
      $info['desc'] = 'Native SOAP extension on PHP5';
      break;

    case 'nuSOAP':
      $info['lib']  = 'nuSOAP';
      $info['desc'] = 'nuSOAP Library';
      break;
     
    default:
      $info['lib']  = 'N/A';
      $info['desc'] = 'None or not supported SOAP Client Libarary';
      break;
  }
  
  return $info;
}

/**
* Initialising the client.
* 
* @param $endpoint
*   A string represent the service endpoint URL, or the URL for
*   the WSDL if WSDL mode is enabled.
* 
* @param $use_wsdl
*   Boolean value to configure soapclient to use (TRUE) or 
*   not use (FALSE) a WSDL file.
* 
* @param $options
*   An associative array to supply as the options for SOAP library.
*   Following options will be mapped to an appropriate parameters
*   for each library automatically.
* 
*   - namespace : the target namespace URI
*   - use       : 'encoded' or 'literal'
*   - style     : 'rpc' or 'document'
* 
*   Following options will be supplied as 'call()' arguments for
*   nuSOAP.
* 
*   - action  : optional SOAPAction value (WSDL can override)
*   - headers : optional string of XML with SOAP header content, or
*               array of soapval objects for SOAP headers
* 
*   For additional options, please consult the PHP5 manual or the
*   NuSOAP manual for details.
* 
*   Note that the proxy information will automatically append to
*   the $options array. Is can be configured via the soapclient's
*   configuration page.
* 
* @return
*   An array of the result with following keys:
*   - #error  : false, if no error. Otherwise, it is the error message
*   - #return : DrupalSoapClient instance - see drupal_soap_client.inc
*               for more details.
*/
function soapclient_init_client($endpoint, $use_wsdl, $options = array())
{
  global $soapclient_LIBRARY;

  $client = NULL;
  $result = array();
  $result['#error']  = FALSE;  
  $result['#return'] = $client;
    
  if ( empty($endpoint) )
  {
    $result['#error'] = t('Service endpoint is empty!');
    return $result;
  }

  // validate options
  if ( isset($options['use']) && ! in_array($options['use'], array('literal', 'encoded')) )
  {
    $result['#error'] = t("Invalid 'use' value - {$options['use']}. Valid values are 'literal' or 'encoded')");
    return $result;
  }
  
  if ( isset($options['style']) && ! in_array($options['style'], array('rpc', 'document')) )
  {
    $result['#error'] = t("Invalid 'style' value - {$options['style']}. Valid values are 'rpc' or 'document')");
    return $result;
  }

  $options = (array) $options;
  
  $proxyhost = variable_get('soapclient_proxyhost', NULL);
  $proxyport = variable_get('soapclient_proxyport', NULL);
  $proxyuser = variable_get('soapclient_proxyuser', NULL);
  $proxypass = variable_get('soapclient_proxypass', NULL);

  if ( $soapclient_LIBRARY == 'nuSOAP' )
  {    
    // prepare parameters for initialisation
    $reqtimeout = variable_get('soapclient_reqtimeout', 10);
    $reptimeout = variable_get('soapclient_reptimeout', 30);

    if ( $use_wsdl )
    {        
      // load from cache first
      $cache = new wsdlcache(variable_get('soapclient_wsdlcache_path', '/tmp'), variable_get('soapclient_wsdlcache_lifetime', 60));
      $wsdl = $cache->get($url);

      if ( empty($wsdl) )
      {
        // not available, create new one
        $wsdl = new wsdl($endpoint, $proxyhost, $proxyport, $proxyuser, $proxypass);
        $cache->put($wsdl);
      }
      
      $endpoint = $wsdl;
    }

    $client = new nusoap_client($endpoint, $use_wsdl, $proxyhost, $proxyport, $proxyuser, $proxypass, $reqtimeout, $reptimeout);

    $err_msg = $client->getError();

    if ( ! empty($err_msg) )
    {
      $result['#error'] = t('Cannot create client - !msg', array('!msg' => $err_msg));
      return $result;
    }
  }
  else if ( $soapclient_LIBRARY == 'PHP5SOAP' )
  {
    if ( ! $use_wsdl )
    {
      if ( empty($options['namespace']) )
      {
        $result['#error'] = t('Target namespace uri is required when using non-WSDL mode of PHP5 SOAP');
        return $result;
      }

      $options['location'] = $endpoint;
      $options['uri']      = $options['namespace'];      
    }

    $options['proxy_host']     = $proxyhost;
    $options['proxy_port']     = $proxyport;
    $options['proxy_login']    = $proxyuser;
    $options['proxy_password'] = $proxypass;
    $options['features']       = SOAP_SINGLE_ELEMENT_ARRAYS; // check http://bugs.php.net/bug.php?id=36226 for more details
    
    if ( isset($options['use']) )
    {
      $options['use'] = ( $options['use'] == 'literal' ? SOAP_LITERAL : SOAP_ENCODED );
    }
    
    if ( isset($options['style']) )
    {
      $options['style'] = ( $options['style'] == 'document' ? SOAP_DOCUMENT : SOAP_RPC );
    }

    try
    {
      $client = new SoapClient( ($use_wsdl ? $endpoint : NULL), $options );
    }
    catch(Exception $e)
    {
      $result['#error'] = t($e->getMessage());
      return $result;
    }
  }
  else // not supported library
  {
    $result['#error'] = t("Un-supported SOAP library - $soapclient_LIBRARY");
    return $result;
  }
  
  $result['#return'] = new DrupalSoapClient($soapclient_LIBRARY, $client, $options);
  
  return $result;
}

/**
* Helper function to convert XML string to multi-dimension array.
* 
* @param $xml
*   an XML string.
* 
* @return
*   An array of the result with following keys:
*   - #error  : false, if no error. Otherwise, it is the error message
*   - #return : a multi-dimension associative array represent the value
*               of the XML input string.
*/
function soapclient_parse_xml_result($xml)
{
  $input  = array();
  $result = array();
  
  $result['#error']  = FALSE;
  $result['#return'] = NULL;

  $xmlparser = xml_parser_create();
  $ret = xml_parse_into_struct($xmlparser, $xml, $input);
  xml_parser_free($xmlparser);

  if ( empty($input) )
  {
    $result['#return'] = $xml;
  }
  else
  {
    if ( $ret > 0 )
    {
      $result['#return'] = _soapclient_parse($input);
    }
    else
    {
      $result['#error'] = t ('Error parsing XML result - error code = '. xml_get_error_code($xmlparser) .' at '.
                             'line '. xml_get_current_line_number($xmlparser) .' '.
                             'char '. xml_get_current_column_number($xmlparser));
    }
  }

  return $result;
}

// private helper for soapclient_parse_xml_result, to recusively parsing the result
function _soapclient_parse($input, $depth = 1)
{
  $output = array();
  $children = array();

  foreach( $input as $data )
  {
    if ( $data['level'] == $depth )
    {
      switch($data['type'])
      {
        case 'complete':
          $output[$data['tag']] = $data['value'];
          break;

        case 'open':
          $children = array();
          break;

        case 'close':
          $output[$data['tag']] = _soapclient_parse($children, $depth + 1);
          break;
      }
    }
    else
    {
      $children[] = $data;
    }
  }
  return $output;
}

/**
* convert an associative array to an object. This code
* is based on the conversion code by Andy Hassall <andy@andyh.co.uk>.
* 
* @param $array
* the associative array to be converted
* 
* @param &$obj
* the output object
* 
* @return
* the converted object
*/
function soapclient_array_to_object($array)
{
  foreach ($array as $key => $value)
  {
    if (is_array($value))
    {
      $obj->$key = new stdClass();
      soapclient_array_to_object($value, $obj->$key);
    }
    else
    {
      $obj->$key = $value;
    }
  }
  return $obj;
}

/**
* convert an object to an associative array.
* 
* @param $object
* the object to be converted
* 
* @return
* an converted associative array
*/
function soapclient_object_to_array($object)
{
  if ( is_object($object) )
  {
    $ret = (array) $object;
  }
  else
  {
    $ret = $object;
  }
  
  if ( is_array($ret) )
  {
    foreach ( $ret as $key => $value )
    {
      $ret[$key] = soapclient_object_to_array($value);
    }
  }
  
  return $ret;
}