<?php
// $Id: textimage.install,v 1.7 2009/02/05 10:05:53 deciphered Exp $

/**
 * @file
 */

/**
 * Implementation of hook_schema().
 */
function textimage_schema() {
  $schema['textimage_preset'] = array(
    'fields' => array(
      'pid' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
      'name' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
      'settings' => array('type' => 'text', 'not null' => TRUE),
    ),
    'primary key' => array('pid'),
  );

  $schema['textimage_image'] = array(
    'fields' => array(
      'pid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      'file' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
      'data' => array('type' => 'text', 'not null' => TRUE),
    ),
    'primary key' => array('file'),
  );

  return $schema;
}

/**
 * Implementation of hook_install().
 */
function textimage_install() {
  drupal_install_schema('textimage');
}

/**
 * Implementation of hook_uninstall().
 */
function textimage_uninstall() {
  include_once(drupal_get_path('module', 'textimage') .'/textimage_admin.inc');

  drupal_uninstall_schema('textimage');

  $path = realpath(file_directory_path() .'/textimage');
  if ($path != FALSE) {
    _textimage_recursive_delete($path);
  }

  variable_del('textimage_fonts_path');
  variable_del('textimage_images_path');
  variable_del('textimage_captcha_fonts_path');
  variable_del('textimage_captcha_images_path');
  variable_del('textimage_captcha_font_size');
  variable_del('textimage_captcha_char_spacing_max');
  variable_del('textimage_captcha_char_jiggle_amount');
  variable_del('textimage_captcha_char_rotate_amount');
  variable_del('textimage_captcha_char_size_amount');
  variable_del('textimage_captcha_use_only_upper');
  variable_del('textimage_captcha_image_noise');
  variable_del('textimage_captcha_image_lines');
  variable_del('textimage_captcha_image_margin');
}

/**
 * Implementation of hook_update_N().
 *
 * Install the textimage tables and seperate variable names for captcha specific variables
 */
function textimage_update_1() {
  $ret = array();

  $schema['textimage_preset'] = array(
    'fields' => array(
      'pid' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
      'name' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
      'settings' => array('type' => 'text', 'not null' => TRUE),
    ),
    'primary key' => array('pid'),
  );
  db_create_table($ret, 'textimage_preset', $schema['textimage_preset']);

  if (variable_get('textimage_fonts_path', '0')) variable_set('textimage_captcha_fonts_path', variable_get('textimage_fonts_path', ''));
  if (variable_get('textimage_font_size', '0')) variable_set('textimage_captcha_font_size', variable_get('textimage_font_size', '24'));
  if (variable_get('textimage_char_spacing_max', '0')) variable_set('textimage_captcha_char_spacing_max', variable_get('textimage_char_spacing_max', '10'));
  if (variable_get('textimage_char_jiggle_amount', '0')) variable_set('textimage_captcha_char_jiggle_amount', variable_get('textimage_char_jiggle_amount', '5'));
  if (variable_get('textimage_char_rotate_amount', '0')) variable_set('textimage_captcha_char_rotate_amount', variable_get('textimage_char_rotate_amount', '5'));
  if (variable_get('textimage_char_size_amount', '0')) variable_set('textimage_captcha_char_size_amount', variable_get('textimage_char_size_amount', '2'));
  if (variable_get('textimage_use_only_upper', '0')) variable_set('textimage_captcha_use_only_upper', variable_get('textimage_use_only_upper', '0'));
  if (variable_get('textimage_images_path', '0')) variable_set('textimage_captcha_images_path', variable_get('textimage_images_path', ''));
  if (variable_get('textimage_image_noise', '0')) variable_set('textimage_captcha_image_noise', variable_get('textimage_image_noise', '4'));
  if (variable_get('textimage_image_lines', '0')) variable_set('textimage_captcha_image_lines', variable_get('textimage_image_lines', '4'));
  if (variable_get('textimage_image_margin', '0')) variable_set('textimage_captcha_image_margin', variable_get('textimage_image_margin', '10'));

  variable_del('textimage_font_size');
  variable_del('textimage_char_spacing_max');
  variable_del('textimage_char_jiggle_amount');
  variable_del('textimage_char_rotate_amount');
  variable_del('textimage_char_size_amount');
  variable_del('textimage_use_only_upper');
  variable_del('textimage_image_noise');
  variable_del('textimage_image_lines');
  variable_del('textimage_image_margin');

  return $ret;
}

function textimage_update_2() {
  $ret = array();

  $schema['textimage_image'] = array(
    'fields' => array(
      'pid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      'file' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
      'data' => array('type' => 'text', 'not null' => TRUE),
    ),
    'primary key' => array('file'),
  );
  db_create_table($ret, 'textimage_image', $schema['textimage_image']);

  include_once(drupal_get_path('module', 'textimage') .'/textimage_admin.inc');
  foreach (textimage_get_presets() as $preset) {
    $path = realpath(file_directory_path() .'/textimage/'. $preset['name']);

    if (is_dir($path)) {
      $files = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($path));
      foreach ($files as $file => $object) {
        $file = str_replace($path .'/', '', $file);
        $args = explode('/', $file);

        $filename = urldecode(array_pop($args));
        $additional_text = $args;

        preg_match('/\.([a-z]+)$/i', $filename, $matches);
        $format = $matches[1];
        if ($format == 'jpg') {
          $format = 'jpeg';
        }

        $text = preg_replace('/\.([a-z]+)$/i', '', $filename);

        db_query(
          "INSERT {textimage_image} (pid, file, data) VALUES (%d, '%s', '%s')",
          $preset['pid'], file_directory_path() .'/textimage/'. $preset['name'] .'/'. $file,
          serialize(array('format' => $format, 'text' => $text, 'additional_text' => $additional_text))
        );
      }
    }
  }

  return $ret;
}

function textimage_update_3() {
  $ret = array();

  include_once(drupal_get_path('module', 'textimage') .'/textimage_admin.inc');
  $presets = textimage_get_presets();
  foreach ($presets as $preset) {
    if ($preset->settings['text']['angle'] != 0) {
      $preset->settings['text']['angle'] = -$preset->settings['text']['angle'];
      _textimage_preset_update($preset->pid, $preset->name, $preset->settings);
    }
  }

  return $ret;
}
